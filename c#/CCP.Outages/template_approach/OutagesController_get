I need to generate unit tests for Get in OutagesController using Xunit and Moq. The tests should strictly follow the provided boilerplate structure. Hereâ€™s the boilerplate for each test method:

using Xunit;
using Moq;
using System;
// Add more using statements here

namespace ${nameSpace}
{
    public class ${ClassName}Test
    {
        [Fact]
        public void ${MethodName}_Test()
        {
            // Instantiate all necessary variables here
            // Write the test code here following the given rules
        }

        // Add more test methods here
    }
}

// Code to be tested
using CCP.Outages.Api.Helpers;
using CCP.Outages.Api.Models;
using CCP.Outages.Api.Repositories;
using CCP.Outages.Client.Exceptions;
using Localization.Client;
using Microsoft.AspNetCore.Mvc;

namespace CCP.Outages.Api.Controllers;

[Route("api/v1/[controller]")]
[ApiController]
public class OutagesController : ControllerBase
{
     public OutagesController(IOutageRepository outageRepository, ILocalizationClient localizationClient, IMappers mappers)
    {
        _outageRepository = outageRepository;
        _localizationClient = localizationClient;
        _mappers = mappers;
    }

    [HttpGet]
    public async Task<IActionResult> Get(
        [FromQuery(Name = "appName")] IEnumerable<string> appNames,
        [FromQuery(Name = "acceptLanguage")] string? acceptLanguage = null
    )
    {
        if (acceptLanguage == null)
        {
            throw new InvalidInputException("acceptLanguage");
        }

        IEnumerable<Outage> outages = await _outageRepository.Get(appNames);
        return Ok(await Map(outages, acceptLanguage));
    }
}    

// Rules to Follow:
// 1. All variables should be instantiated within the test method itself.
// 2. Do not access any private variables, methods, or classes directly.
// 3. Use Moq for mocking dependencies and xUnit for assertions.
// 4. The test suite should strive to achieve high code and branch coverage, and cover edge cases.
// 5. Return the entire code section in one coherent piece.
