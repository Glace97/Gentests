Compiled from "StringUtils.java"
public class org.apache.commons.lang3.StringUtils {
  public static final java.lang.String SPACE;
  public static final java.lang.String EMPTY;
  public static final java.lang.String LF;
  public static final java.lang.String CR;
  public static final int INDEX_NOT_FOUND;
  private static final int PAD_LIMIT;
  private static final java.util.regex.Pattern STRIP_ACCENTS_PATTERN;
  public static java.lang.String abbreviate(java.lang.String, int);
  public static java.lang.String abbreviate(java.lang.String, int, int);
  public static java.lang.String abbreviate(java.lang.String, java.lang.String, int);
  public static java.lang.String abbreviate(java.lang.String, java.lang.String, int, int);
  public static java.lang.String abbreviateMiddle(java.lang.String, java.lang.String, int);
  private static java.lang.String appendIfMissing(java.lang.String, java.lang.CharSequence, boolean, java.lang.CharSequence...);
  public static java.lang.String appendIfMissing(java.lang.String, java.lang.CharSequence, java.lang.CharSequence...);
  public static java.lang.String appendIfMissingIgnoreCase(java.lang.String, java.lang.CharSequence, java.lang.CharSequence...);
  public static java.lang.String capitalize(java.lang.String);
  public static java.lang.String center(java.lang.String, int);
  public static java.lang.String center(java.lang.String, int, char);
  public static java.lang.String center(java.lang.String, int, java.lang.String);
  public static java.lang.String chomp(java.lang.String);
  public static java.lang.String chomp(java.lang.String, java.lang.String);
  public static java.lang.String chop(java.lang.String);
  public static int compare(java.lang.String, java.lang.String);
  public static int compare(java.lang.String, java.lang.String, boolean);
  public static int compareIgnoreCase(java.lang.String, java.lang.String);
  public static int compareIgnoreCase(java.lang.String, java.lang.String, boolean);
  public static boolean contains(java.lang.CharSequence, java.lang.CharSequence);
  public static boolean contains(java.lang.CharSequence, int);
  public static boolean containsAny(java.lang.CharSequence, char...);
  public static boolean containsAny(java.lang.CharSequence, java.lang.CharSequence);
  public static boolean containsAny(java.lang.CharSequence, java.lang.CharSequence...);
  private static boolean containsAny(org.apache.commons.lang3.function.ToBooleanBiFunction<java.lang.CharSequence, java.lang.CharSequence>, java.lang.CharSequence, java.lang.CharSequence...);
  public static boolean containsAnyIgnoreCase(java.lang.CharSequence, java.lang.CharSequence...);
  public static boolean containsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence);
  public static boolean containsNone(java.lang.CharSequence, char...);
  public static boolean containsNone(java.lang.CharSequence, java.lang.String);
  public static boolean containsOnly(java.lang.CharSequence, char...);
  public static boolean containsOnly(java.lang.CharSequence, java.lang.String);
  public static boolean containsWhitespace(java.lang.CharSequence);
  private static void convertRemainingAccentCharacters(java.lang.StringBuilder);
  public static int countMatches(java.lang.CharSequence, char);
  public static int countMatches(java.lang.CharSequence, java.lang.CharSequence);
  public static <T extends java.lang.CharSequence> T defaultIfBlank(T, T);
  public static <T extends java.lang.CharSequence> T defaultIfEmpty(T, T);
  public static java.lang.String defaultString(java.lang.String);
  public static java.lang.String defaultString(java.lang.String, java.lang.String);
  public static java.lang.String deleteWhitespace(java.lang.String);
  public static java.lang.String difference(java.lang.String, java.lang.String);
  public static boolean endsWith(java.lang.CharSequence, java.lang.CharSequence);
  private static boolean endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean);
  public static boolean endsWithAny(java.lang.CharSequence, java.lang.CharSequence...);
  public static boolean endsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence);
  public static boolean equals(java.lang.CharSequence, java.lang.CharSequence);
  public static boolean equalsAny(java.lang.CharSequence, java.lang.CharSequence...);
  public static boolean equalsAnyIgnoreCase(java.lang.CharSequence, java.lang.CharSequence...);
  public static boolean equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence);
  public static <T extends java.lang.CharSequence> T firstNonBlank(T...);
  public static <T extends java.lang.CharSequence> T firstNonEmpty(T...);
  public static byte[] getBytes(java.lang.String, java.nio.charset.Charset);
  public static byte[] getBytes(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException;
  public static java.lang.String getCommonPrefix(java.lang.String...);
  public static java.lang.String getDigits(java.lang.String);
  public static int getFuzzyDistance(java.lang.CharSequence, java.lang.CharSequence, java.util.Locale);
  public static <T extends java.lang.CharSequence> T getIfBlank(T, java.util.function.Supplier<T>);
  public static <T extends java.lang.CharSequence> T getIfEmpty(T, java.util.function.Supplier<T>);
  public static double getJaroWinklerDistance(java.lang.CharSequence, java.lang.CharSequence);
  public static int getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence);
  public static int getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence, int);
  public static int indexOf(java.lang.CharSequence, java.lang.CharSequence);
  public static int indexOf(java.lang.CharSequence, java.lang.CharSequence, int);
  public static int indexOf(java.lang.CharSequence, int);
  public static int indexOf(java.lang.CharSequence, int, int);
  public static int indexOfAny(java.lang.CharSequence, char...);
  public static int indexOfAny(java.lang.CharSequence, java.lang.CharSequence...);
  public static int indexOfAny(java.lang.CharSequence, java.lang.String);
  public static int indexOfAnyBut(java.lang.CharSequence, char...);
  public static int indexOfAnyBut(java.lang.CharSequence, java.lang.CharSequence);
  public static int indexOfDifference(java.lang.CharSequence...);
  public static int indexOfDifference(java.lang.CharSequence, java.lang.CharSequence);
  public static int indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence);
  public static int indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int);
  public static boolean isAllBlank(java.lang.CharSequence...);
  public static boolean isAllEmpty(java.lang.CharSequence...);
  public static boolean isAllLowerCase(java.lang.CharSequence);
  public static boolean isAllUpperCase(java.lang.CharSequence);
  public static boolean isAlpha(java.lang.CharSequence);
  public static boolean isAlphanumeric(java.lang.CharSequence);
  public static boolean isAlphanumericSpace(java.lang.CharSequence);
  public static boolean isAlphaSpace(java.lang.CharSequence);
  public static boolean isAnyBlank(java.lang.CharSequence...);
  public static boolean isAnyEmpty(java.lang.CharSequence...);
  public static boolean isAsciiPrintable(java.lang.CharSequence);
  public static boolean isBlank(java.lang.CharSequence);
  public static boolean isEmpty(java.lang.CharSequence);
  public static boolean isMixedCase(java.lang.CharSequence);
  public static boolean isNoneBlank(java.lang.CharSequence...);
  public static boolean isNoneEmpty(java.lang.CharSequence...);
  public static boolean isNotBlank(java.lang.CharSequence);
  public static boolean isNotEmpty(java.lang.CharSequence);
  public static boolean isNumeric(java.lang.CharSequence);
  public static boolean isNumericSpace(java.lang.CharSequence);
  public static boolean isWhitespace(java.lang.CharSequence);
  public static java.lang.String join(boolean[], char);
  public static java.lang.String join(boolean[], char, int, int);
  public static java.lang.String join(byte[], char);
  public static java.lang.String join(byte[], char, int, int);
  public static java.lang.String join(char[], char);
  public static java.lang.String join(char[], char, int, int);
  public static java.lang.String join(double[], char);
  public static java.lang.String join(double[], char, int, int);
  public static java.lang.String join(float[], char);
  public static java.lang.String join(float[], char, int, int);
  public static java.lang.String join(int[], char);
  public static java.lang.String join(int[], char, int, int);
  public static java.lang.String join(java.lang.Iterable<?>, char);
  public static java.lang.String join(java.lang.Iterable<?>, java.lang.String);
  public static java.lang.String join(java.util.Iterator<?>, char);
  public static java.lang.String join(java.util.Iterator<?>, java.lang.String);
  public static java.lang.String join(java.util.List<?>, char, int, int);
  public static java.lang.String join(java.util.List<?>, java.lang.String, int, int);
  public static java.lang.String join(long[], char);
  public static java.lang.String join(long[], char, int, int);
  public static java.lang.String join(java.lang.Object[], char);
  public static java.lang.String join(java.lang.Object[], char, int, int);
  public static java.lang.String join(java.lang.Object[], java.lang.String);
  public static java.lang.String join(java.lang.Object[], java.lang.String, int, int);
  public static java.lang.String join(short[], char);
  public static java.lang.String join(short[], char, int, int);
  public static <T> java.lang.String join(T...);
  public static java.lang.String joinWith(java.lang.String, java.lang.Object...);
  public static int lastIndexOf(java.lang.CharSequence, java.lang.CharSequence);
  public static int lastIndexOf(java.lang.CharSequence, java.lang.CharSequence, int);
  public static int lastIndexOf(java.lang.CharSequence, int);
  public static int lastIndexOf(java.lang.CharSequence, int, int);
  public static int lastIndexOfAny(java.lang.CharSequence, java.lang.CharSequence...);
  public static int lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence);
  public static int lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int);
  public static int lastOrdinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int);
  public static java.lang.String left(java.lang.String, int);
  public static java.lang.String leftPad(java.lang.String, int);
  public static java.lang.String leftPad(java.lang.String, int, char);
  public static java.lang.String leftPad(java.lang.String, int, java.lang.String);
  public static int length(java.lang.CharSequence);
  public static java.lang.String lowerCase(java.lang.String);
  public static java.lang.String lowerCase(java.lang.String, java.util.Locale);
  private static int[] matches(java.lang.CharSequence, java.lang.CharSequence);
  public static java.lang.String mid(java.lang.String, int, int);
  public static java.lang.String normalizeSpace(java.lang.String);
  public static int ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int);
  private static int ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int, boolean);
  public static java.lang.String overlay(java.lang.String, java.lang.String, int, int);
  private static java.lang.String prependIfMissing(java.lang.String, java.lang.CharSequence, boolean, java.lang.CharSequence...);
  public static java.lang.String prependIfMissing(java.lang.String, java.lang.CharSequence, java.lang.CharSequence...);
  public static java.lang.String prependIfMissingIgnoreCase(java.lang.String, java.lang.CharSequence, java.lang.CharSequence...);
  public static java.lang.String remove(java.lang.String, char);
  public static java.lang.String remove(java.lang.String, java.lang.String);
  public static java.lang.String removeAll(java.lang.String, java.lang.String);
  public static java.lang.String removeEnd(java.lang.String, java.lang.String);
  public static java.lang.String removeEndIgnoreCase(java.lang.String, java.lang.String);
  public static java.lang.String removeFirst(java.lang.String, java.lang.String);
  public static java.lang.String removeIgnoreCase(java.lang.String, java.lang.String);
  public static java.lang.String removePattern(java.lang.String, java.lang.String);
  public static java.lang.String removeStart(java.lang.String, char);
  public static java.lang.String removeStart(java.lang.String, java.lang.String);
  public static java.lang.String removeStartIgnoreCase(java.lang.String, java.lang.String);
  public static java.lang.String repeat(char, int);
  public static java.lang.String repeat(java.lang.String, int);
  public static java.lang.String repeat(java.lang.String, java.lang.String, int);
  public static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String, int);
  private static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String, int, boolean);
  public static java.lang.String replaceAll(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String replaceChars(java.lang.String, char, char);
  public static java.lang.String replaceChars(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String replaceEach(java.lang.String, java.lang.String[], java.lang.String[]);
  private static java.lang.String replaceEach(java.lang.String, java.lang.String[], java.lang.String[], boolean, int);
  public static java.lang.String replaceEachRepeatedly(java.lang.String, java.lang.String[], java.lang.String[]);
  public static java.lang.String replaceFirst(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String replaceIgnoreCase(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String replaceIgnoreCase(java.lang.String, java.lang.String, java.lang.String, int);
  public static java.lang.String replaceOnce(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String replaceOnceIgnoreCase(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String replacePattern(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String reverse(java.lang.String);
  public static java.lang.String reverseDelimited(java.lang.String, char);
  public static java.lang.String right(java.lang.String, int);
  public static java.lang.String rightPad(java.lang.String, int);
  public static java.lang.String rightPad(java.lang.String, int, char);
  public static java.lang.String rightPad(java.lang.String, int, java.lang.String);
  public static java.lang.String rotate(java.lang.String, int);
  public static java.lang.String[] split(java.lang.String);
  public static java.lang.String[] split(java.lang.String, char);
  public static java.lang.String[] split(java.lang.String, java.lang.String);
  public static java.lang.String[] split(java.lang.String, java.lang.String, int);
  public static java.lang.String[] splitByCharacterType(java.lang.String);
  private static java.lang.String[] splitByCharacterType(java.lang.String, boolean);
  public static java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String);
  public static java.lang.String[] splitByWholeSeparator(java.lang.String, java.lang.String);
  public static java.lang.String[] splitByWholeSeparator(java.lang.String, java.lang.String, int);
  public static java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String);
  public static java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String, int);
  private static java.lang.String[] splitByWholeSeparatorWorker(java.lang.String, java.lang.String, int, boolean);
  public static java.lang.String[] splitPreserveAllTokens(java.lang.String);
  public static java.lang.String[] splitPreserveAllTokens(java.lang.String, char);
  public static java.lang.String[] splitPreserveAllTokens(java.lang.String, java.lang.String);
  public static java.lang.String[] splitPreserveAllTokens(java.lang.String, java.lang.String, int);
  private static java.lang.String[] splitWorker(java.lang.String, char, boolean);
  private static java.lang.String[] splitWorker(java.lang.String, java.lang.String, int, boolean);
  public static boolean startsWith(java.lang.CharSequence, java.lang.CharSequence);
  private static boolean startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean);
  public static boolean startsWithAny(java.lang.CharSequence, java.lang.CharSequence...);
  public static boolean startsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence);
  public static java.lang.String strip(java.lang.String);
  public static java.lang.String strip(java.lang.String, java.lang.String);
  public static java.lang.String stripAccents(java.lang.String);
  public static java.lang.String[] stripAll(java.lang.String...);
  public static java.lang.String[] stripAll(java.lang.String[], java.lang.String);
  public static java.lang.String stripEnd(java.lang.String, java.lang.String);
  public static java.lang.String stripStart(java.lang.String, java.lang.String);
  public static java.lang.String stripToEmpty(java.lang.String);
  public static java.lang.String stripToNull(java.lang.String);
  public static java.lang.String substring(java.lang.String, int);
  public static java.lang.String substring(java.lang.String, int, int);
  public static java.lang.String substringAfter(java.lang.String, int);
  public static java.lang.String substringAfter(java.lang.String, java.lang.String);
  public static java.lang.String substringAfterLast(java.lang.String, int);
  public static java.lang.String substringAfterLast(java.lang.String, java.lang.String);
  public static java.lang.String substringBefore(java.lang.String, int);
  public static java.lang.String substringBefore(java.lang.String, java.lang.String);
  public static java.lang.String substringBeforeLast(java.lang.String, java.lang.String);
  public static java.lang.String substringBetween(java.lang.String, java.lang.String);
  public static java.lang.String substringBetween(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String[] substringsBetween(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String swapCase(java.lang.String);
  public static int[] toCodePoints(java.lang.CharSequence);
  public static java.lang.String toEncodedString(byte[], java.nio.charset.Charset);
  public static java.lang.String toRootLowerCase(java.lang.String);
  public static java.lang.String toRootUpperCase(java.lang.String);
  public static java.lang.String toString(byte[], java.lang.String) throws java.io.UnsupportedEncodingException;
  private static java.lang.String toStringOrEmpty(java.lang.Object);
  public static java.lang.String trim(java.lang.String);
  public static java.lang.String trimToEmpty(java.lang.String);
  public static java.lang.String trimToNull(java.lang.String);
  public static java.lang.String truncate(java.lang.String, int);
  public static java.lang.String truncate(java.lang.String, int, int);
  public static java.lang.String uncapitalize(java.lang.String);
  public static java.lang.String unwrap(java.lang.String, char);
  public static java.lang.String unwrap(java.lang.String, java.lang.String);
  public static java.lang.String upperCase(java.lang.String);
  public static java.lang.String upperCase(java.lang.String, java.util.Locale);
  public static java.lang.String valueOf(char[]);
  public static java.lang.String wrap(java.lang.String, char);
  public static java.lang.String wrap(java.lang.String, java.lang.String);
  public static java.lang.String wrapIfMissing(java.lang.String, char);
  public static java.lang.String wrapIfMissing(java.lang.String, java.lang.String);
  public org.apache.commons.lang3.StringUtils();
  private static java.lang.String lambda$stripAll$0(java.lang.String[], java.lang.String, int);
  static {};
}
