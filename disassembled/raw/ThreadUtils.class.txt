Compiled from "ThreadUtils.java"
public class org.apache.commons.lang3.ThreadUtils {
  public static final org.apache.commons.lang3.ThreadUtils$AlwaysTruePredicate ALWAYS_TRUE_PREDICATE;
  private static final java.util.function.Predicate<?> ALWAYS_TRUE;
  private static <T> java.util.function.Predicate<T> alwaysTruePredicate();
  public static java.lang.Thread findThreadById(long);
  public static java.lang.Thread findThreadById(long, java.lang.String);
  public static java.lang.Thread findThreadById(long, java.lang.ThreadGroup);
  public static java.util.Collection<java.lang.ThreadGroup> findThreadGroups(java.util.function.Predicate<java.lang.ThreadGroup>);
  public static java.util.Collection<java.lang.ThreadGroup> findThreadGroups(java.lang.ThreadGroup, boolean, java.util.function.Predicate<java.lang.ThreadGroup>);
  public static java.util.Collection<java.lang.ThreadGroup> findThreadGroups(java.lang.ThreadGroup, boolean, org.apache.commons.lang3.ThreadUtils$ThreadGroupPredicate);
  public static java.util.Collection<java.lang.ThreadGroup> findThreadGroups(org.apache.commons.lang3.ThreadUtils$ThreadGroupPredicate);
  public static java.util.Collection<java.lang.ThreadGroup> findThreadGroupsByName(java.lang.String);
  public static java.util.Collection<java.lang.Thread> findThreads(java.util.function.Predicate<java.lang.Thread>);
  public static java.util.Collection<java.lang.Thread> findThreads(java.lang.ThreadGroup, boolean, java.util.function.Predicate<java.lang.Thread>);
  public static java.util.Collection<java.lang.Thread> findThreads(java.lang.ThreadGroup, boolean, org.apache.commons.lang3.ThreadUtils$ThreadPredicate);
  public static java.util.Collection<java.lang.Thread> findThreads(org.apache.commons.lang3.ThreadUtils$ThreadPredicate);
  public static java.util.Collection<java.lang.Thread> findThreadsByName(java.lang.String);
  public static java.util.Collection<java.lang.Thread> findThreadsByName(java.lang.String, java.lang.String);
  public static java.util.Collection<java.lang.Thread> findThreadsByName(java.lang.String, java.lang.ThreadGroup);
  public static java.util.Collection<java.lang.ThreadGroup> getAllThreadGroups();
  public static java.util.Collection<java.lang.Thread> getAllThreads();
  public static java.lang.ThreadGroup getSystemThreadGroup();
  public static void join(java.lang.Thread, java.time.Duration) throws java.lang.InterruptedException;
  private static <T> java.util.function.Predicate<T> namePredicate(java.lang.String, java.util.function.Function<T, java.lang.String>);
  private static java.util.function.Predicate<java.lang.Thread> predicateThread(java.lang.String);
  private static java.util.function.Predicate<java.lang.ThreadGroup> predicateThreadGroup(java.lang.String);
  public static void sleep(java.time.Duration) throws java.lang.InterruptedException;
  public static void sleepQuietly(java.time.Duration);
  public org.apache.commons.lang3.ThreadUtils();
  private static boolean lambda$namePredicate$3(java.util.function.Function, java.lang.String, java.lang.Object);
  private static java.util.stream.Stream lambda$findThreadsByName$2(java.lang.String, java.lang.ThreadGroup);
  private static boolean lambda$findThreadById$1(long, java.lang.Thread);
  private static boolean lambda$static$0(java.lang.Object);
  static {};
}
