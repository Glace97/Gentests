Compiled from "Failable.java"
public class org.apache.commons.lang3.function.Failable {
  public static <T, U, E extends java.lang.Throwable> void accept(org.apache.commons.lang3.function.FailableBiConsumer<T, U, E>, T, U);
  public static <T, E extends java.lang.Throwable> void accept(org.apache.commons.lang3.function.FailableConsumer<T, E>, T);
  public static <E extends java.lang.Throwable> void accept(org.apache.commons.lang3.function.FailableDoubleConsumer<E>, double);
  public static <E extends java.lang.Throwable> void accept(org.apache.commons.lang3.function.FailableIntConsumer<E>, int);
  public static <E extends java.lang.Throwable> void accept(org.apache.commons.lang3.function.FailableLongConsumer<E>, long);
  public static <T, U, R, E extends java.lang.Throwable> R apply(org.apache.commons.lang3.function.FailableBiFunction<T, U, R, E>, T, U);
  public static <T, R, E extends java.lang.Throwable> R apply(org.apache.commons.lang3.function.FailableFunction<T, R, E>, T);
  public static <E extends java.lang.Throwable> double applyAsDouble(org.apache.commons.lang3.function.FailableDoubleBinaryOperator<E>, double, double);
  public static <T, U> java.util.function.BiConsumer<T, U> asBiConsumer(org.apache.commons.lang3.function.FailableBiConsumer<T, U, ?>);
  public static <T, U, R> java.util.function.BiFunction<T, U, R> asBiFunction(org.apache.commons.lang3.function.FailableBiFunction<T, U, R, ?>);
  public static <T, U> java.util.function.BiPredicate<T, U> asBiPredicate(org.apache.commons.lang3.function.FailableBiPredicate<T, U, ?>);
  public static <V> java.util.concurrent.Callable<V> asCallable(org.apache.commons.lang3.function.FailableCallable<V, ?>);
  public static <T> java.util.function.Consumer<T> asConsumer(org.apache.commons.lang3.function.FailableConsumer<T, ?>);
  public static <T, R> java.util.function.Function<T, R> asFunction(org.apache.commons.lang3.function.FailableFunction<T, R, ?>);
  public static <T> java.util.function.Predicate<T> asPredicate(org.apache.commons.lang3.function.FailablePredicate<T, ?>);
  public static java.lang.Runnable asRunnable(org.apache.commons.lang3.function.FailableRunnable<?>);
  public static <T> java.util.function.Supplier<T> asSupplier(org.apache.commons.lang3.function.FailableSupplier<T, ?>);
  public static <V, E extends java.lang.Throwable> V call(org.apache.commons.lang3.function.FailableCallable<V, E>);
  public static <T, E extends java.lang.Throwable> T get(org.apache.commons.lang3.function.FailableSupplier<T, E>);
  public static <E extends java.lang.Throwable> boolean getAsBoolean(org.apache.commons.lang3.function.FailableBooleanSupplier<E>);
  public static <E extends java.lang.Throwable> double getAsDouble(org.apache.commons.lang3.function.FailableDoubleSupplier<E>);
  public static <E extends java.lang.Throwable> int getAsInt(org.apache.commons.lang3.function.FailableIntSupplier<E>);
  public static <E extends java.lang.Throwable> long getAsLong(org.apache.commons.lang3.function.FailableLongSupplier<E>);
  public static <E extends java.lang.Throwable> short getAsShort(org.apache.commons.lang3.function.FailableShortSupplier<E>);
  public static java.lang.RuntimeException rethrow(java.lang.Throwable);
  public static <E extends java.lang.Throwable> void run(org.apache.commons.lang3.function.FailableRunnable<E>);
  public static <E> org.apache.commons.lang3.stream.Streams$FailableStream<E> stream(java.util.Collection<E>);
  public static <T> org.apache.commons.lang3.stream.Streams$FailableStream<T> stream(java.util.stream.Stream<T>);
  public static <T, U, E extends java.lang.Throwable> boolean test(org.apache.commons.lang3.function.FailableBiPredicate<T, U, E>, T, U);
  public static <T, E extends java.lang.Throwable> boolean test(org.apache.commons.lang3.function.FailablePredicate<T, E>, T);
  public static void tryWithResources(org.apache.commons.lang3.function.FailableRunnable<? extends java.lang.Throwable>, org.apache.commons.lang3.function.FailableConsumer<java.lang.Throwable, ? extends java.lang.Throwable>, org.apache.commons.lang3.function.FailableRunnable<? extends java.lang.Throwable>...);
  public static void tryWithResources(org.apache.commons.lang3.function.FailableRunnable<? extends java.lang.Throwable>, org.apache.commons.lang3.function.FailableRunnable<? extends java.lang.Throwable>...);
  private org.apache.commons.lang3.function.Failable();
  private static void lambda$tryWithResources$19(org.apache.commons.lang3.function.FailableRunnable);
  private static boolean lambda$test$18(org.apache.commons.lang3.function.FailablePredicate, java.lang.Object) throws java.lang.Throwable;
  private static boolean lambda$test$17(org.apache.commons.lang3.function.FailableBiPredicate, java.lang.Object, java.lang.Object) throws java.lang.Throwable;
  private static java.lang.Object lambda$asSupplier$16(org.apache.commons.lang3.function.FailableSupplier);
  private static void lambda$asRunnable$15(org.apache.commons.lang3.function.FailableRunnable);
  private static boolean lambda$asPredicate$14(org.apache.commons.lang3.function.FailablePredicate, java.lang.Object);
  private static java.lang.Object lambda$asFunction$13(org.apache.commons.lang3.function.FailableFunction, java.lang.Object);
  private static void lambda$asConsumer$12(org.apache.commons.lang3.function.FailableConsumer, java.lang.Object);
  private static java.lang.Object lambda$asCallable$11(org.apache.commons.lang3.function.FailableCallable) throws java.lang.Exception;
  private static boolean lambda$asBiPredicate$10(org.apache.commons.lang3.function.FailableBiPredicate, java.lang.Object, java.lang.Object);
  private static java.lang.Object lambda$asBiFunction$9(org.apache.commons.lang3.function.FailableBiFunction, java.lang.Object, java.lang.Object);
  private static void lambda$asBiConsumer$8(org.apache.commons.lang3.function.FailableBiConsumer, java.lang.Object, java.lang.Object);
  private static double lambda$applyAsDouble$7(org.apache.commons.lang3.function.FailableDoubleBinaryOperator, double, double) throws java.lang.Throwable;
  private static java.lang.Object lambda$apply$6(org.apache.commons.lang3.function.FailableFunction, java.lang.Object) throws java.lang.Throwable;
  private static java.lang.Object lambda$apply$5(org.apache.commons.lang3.function.FailableBiFunction, java.lang.Object, java.lang.Object) throws java.lang.Throwable;
  private static void lambda$accept$4(org.apache.commons.lang3.function.FailableLongConsumer, long) throws java.lang.Throwable;
  private static void lambda$accept$3(org.apache.commons.lang3.function.FailableIntConsumer, int) throws java.lang.Throwable;
  private static void lambda$accept$2(org.apache.commons.lang3.function.FailableDoubleConsumer, double) throws java.lang.Throwable;
  private static void lambda$accept$1(org.apache.commons.lang3.function.FailableConsumer, java.lang.Object) throws java.lang.Throwable;
  private static void lambda$accept$0(org.apache.commons.lang3.function.FailableBiConsumer, java.lang.Object, java.lang.Object) throws java.lang.Throwable;
}
