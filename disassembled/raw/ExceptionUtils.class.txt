Compiled from "ExceptionUtils.java"
public class org.apache.commons.lang3.exception.ExceptionUtils {
  private static final java.lang.String[] CAUSE_METHOD_NAMES;
  private static final int NOT_FOUND;
  static final java.lang.String WRAPPED_MARKER;
  public static <T extends java.lang.RuntimeException> T asRuntimeException(java.lang.Throwable);
  private static <R, T extends java.lang.Throwable> R eraseType(java.lang.Throwable) throws T;
  public static void forEach(java.lang.Throwable, java.util.function.Consumer<java.lang.Throwable>);
  public static java.lang.Throwable getCause(java.lang.Throwable);
  public static java.lang.Throwable getCause(java.lang.Throwable, java.lang.String[]);
  private static java.lang.Throwable getCauseUsingMethodName(java.lang.Throwable, java.lang.String);
  public static java.lang.String[] getDefaultCauseMethodNames();
  public static java.lang.String getMessage(java.lang.Throwable);
  public static java.lang.Throwable getRootCause(java.lang.Throwable);
  public static java.lang.String getRootCauseMessage(java.lang.Throwable);
  public static java.lang.String[] getRootCauseStackTrace(java.lang.Throwable);
  public static java.util.List<java.lang.String> getRootCauseStackTraceList(java.lang.Throwable);
  static java.util.List<java.lang.String> getStackFrameList(java.lang.Throwable);
  static java.lang.String[] getStackFrames(java.lang.String);
  public static java.lang.String[] getStackFrames(java.lang.Throwable);
  public static java.lang.String getStackTrace(java.lang.Throwable);
  public static int getThrowableCount(java.lang.Throwable);
  public static java.util.List<java.lang.Throwable> getThrowableList(java.lang.Throwable);
  public static java.lang.Throwable[] getThrowables(java.lang.Throwable);
  public static boolean hasCause(java.lang.Throwable, java.lang.Class<? extends java.lang.Throwable>);
  private static int indexOf(java.lang.Throwable, java.lang.Class<? extends java.lang.Throwable>, int, boolean);
  public static int indexOfThrowable(java.lang.Throwable, java.lang.Class<? extends java.lang.Throwable>);
  public static int indexOfThrowable(java.lang.Throwable, java.lang.Class<? extends java.lang.Throwable>, int);
  public static int indexOfType(java.lang.Throwable, java.lang.Class<? extends java.lang.Throwable>);
  public static int indexOfType(java.lang.Throwable, java.lang.Class<? extends java.lang.Throwable>, int);
  public static boolean isChecked(java.lang.Throwable);
  public static boolean isUnchecked(java.lang.Throwable);
  public static void printRootCauseStackTrace(java.lang.Throwable);
  public static void printRootCauseStackTrace(java.lang.Throwable, java.io.PrintStream);
  public static void printRootCauseStackTrace(java.lang.Throwable, java.io.PrintWriter);
  public static void removeCommonFrames(java.util.List<java.lang.String>, java.util.List<java.lang.String>);
  public static <T> T rethrow(java.lang.Throwable);
  public static java.util.stream.Stream<java.lang.Throwable> stream(java.lang.Throwable);
  private static <T extends java.lang.Throwable> T throwableOf(java.lang.Throwable, java.lang.Class<T>, int, boolean);
  public static <T extends java.lang.Throwable> T throwableOfThrowable(java.lang.Throwable, java.lang.Class<T>);
  public static <T extends java.lang.Throwable> T throwableOfThrowable(java.lang.Throwable, java.lang.Class<T>, int);
  public static <T extends java.lang.Throwable> T throwableOfType(java.lang.Throwable, java.lang.Class<T>);
  public static <T extends java.lang.Throwable> T throwableOfType(java.lang.Throwable, java.lang.Class<T>, int);
  public static <T> T throwUnchecked(T);
  public static <T extends java.lang.Throwable> T throwUnchecked(T);
  public static <R> R wrapAndThrow(java.lang.Throwable);
  public org.apache.commons.lang3.exception.ExceptionUtils();
  private static java.lang.Throwable lambda$getCause$0(java.lang.Throwable, java.lang.String);
  static {};
}
