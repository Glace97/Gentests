Compiled from "TypeUtils.java"
public class org.apache.commons.lang3.reflect.TypeUtils {
  public static final java.lang.reflect.WildcardType WILDCARD_ALL;
  private static <T> java.lang.StringBuilder appendAllTo(java.lang.StringBuilder, java.lang.String, T...);
  private static void appendRecursiveTypes(java.lang.StringBuilder, int[], java.lang.reflect.Type[]);
  private static java.lang.String classToString(java.lang.Class<?>);
  public static boolean containsTypeVariables(java.lang.reflect.Type);
  private static boolean containsVariableTypeSameParametrizedTypeBound(java.lang.reflect.TypeVariable<?>, java.lang.reflect.ParameterizedType);
  public static java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> determineTypeArguments(java.lang.Class<?>, java.lang.reflect.ParameterizedType);
  private static boolean equals(java.lang.reflect.GenericArrayType, java.lang.reflect.Type);
  private static boolean equals(java.lang.reflect.ParameterizedType, java.lang.reflect.Type);
  public static boolean equals(java.lang.reflect.Type, java.lang.reflect.Type);
  private static boolean equals(java.lang.reflect.Type[], java.lang.reflect.Type[]);
  private static boolean equals(java.lang.reflect.WildcardType, java.lang.reflect.Type);
  private static java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>, java.lang.reflect.TypeVariable<?>[]);
  private static int[] findRecursiveTypes(java.lang.reflect.ParameterizedType);
  public static java.lang.reflect.GenericArrayType genericArrayType(java.lang.reflect.Type);
  private static java.lang.String genericArrayTypeToString(java.lang.reflect.GenericArrayType);
  public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type);
  private static java.lang.reflect.Type getClosestParentType(java.lang.Class<?>, java.lang.Class<?>);
  public static java.lang.reflect.Type[] getImplicitBounds(java.lang.reflect.TypeVariable<?>);
  public static java.lang.reflect.Type[] getImplicitLowerBounds(java.lang.reflect.WildcardType);
  public static java.lang.reflect.Type[] getImplicitUpperBounds(java.lang.reflect.WildcardType);
  private static java.lang.Class<?> getRawType(java.lang.reflect.ParameterizedType);
  public static java.lang.Class<?> getRawType(java.lang.reflect.Type, java.lang.reflect.Type);
  private static java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> getTypeArguments(java.lang.Class<?>, java.lang.Class<?>, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);
  public static java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> getTypeArguments(java.lang.reflect.ParameterizedType);
  private static java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> getTypeArguments(java.lang.reflect.ParameterizedType, java.lang.Class<?>, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);
  public static java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> getTypeArguments(java.lang.reflect.Type, java.lang.Class<?>);
  private static java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> getTypeArguments(java.lang.reflect.Type, java.lang.Class<?>, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);
  public static boolean isArrayType(java.lang.reflect.Type);
  private static boolean isAssignable(java.lang.reflect.Type, java.lang.Class<?>);
  private static boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.GenericArrayType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);
  private static boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);
  public static boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.Type);
  private static boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);
  private static boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.TypeVariable<?>, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);
  private static boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);
  public static boolean isInstance(java.lang.Object, java.lang.reflect.Type);
  private static <T> void mapTypeVariablesToArguments(java.lang.Class<T>, java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);
  public static java.lang.reflect.Type[] normalizeUpperBounds(java.lang.reflect.Type[]);
  public static final java.lang.reflect.ParameterizedType parameterize(java.lang.Class<?>, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);
  public static final java.lang.reflect.ParameterizedType parameterize(java.lang.Class<?>, java.lang.reflect.Type...);
  private static java.lang.String parameterizedTypeToString(java.lang.reflect.ParameterizedType);
  public static final java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type, java.lang.Class<?>, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);
  public static final java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type...);
  private static java.lang.reflect.Type substituteTypeVariables(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);
  public static java.lang.String toLongString(java.lang.reflect.TypeVariable<?>);
  private static <T> java.lang.String toString(T);
  public static java.lang.String toString(java.lang.reflect.Type);
  public static boolean typesSatisfyVariables(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);
  private static java.lang.String typeVariableToString(java.lang.reflect.TypeVariable<?>);
  private static java.lang.reflect.Type[] unrollBounds(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>, java.lang.reflect.Type[]);
  private static java.lang.reflect.Type unrollVariableAssignments(java.lang.reflect.TypeVariable<?>, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);
  public static java.lang.reflect.Type unrollVariables(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>, java.lang.reflect.Type);
  public static org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder wildcardType();
  private static java.lang.String wildcardTypeToString(java.lang.reflect.WildcardType);
  public static <T> org.apache.commons.lang3.reflect.Typed<T> wrap(java.lang.Class<T>);
  public static <T> org.apache.commons.lang3.reflect.Typed<T> wrap(java.lang.reflect.Type);
  public org.apache.commons.lang3.reflect.TypeUtils();
  private static java.lang.reflect.Type lambda$wrap$0(java.lang.reflect.Type);
  static boolean access$000(java.lang.reflect.GenericArrayType, java.lang.reflect.Type);
  static boolean access$100(java.lang.reflect.ParameterizedType, java.lang.reflect.Type);
  static boolean access$300(java.lang.reflect.WildcardType, java.lang.reflect.Type);
  static {};
}
