Compiled from "TimedSemaphore.java"
public class org.apache.commons.lang3.concurrent.TimedSemaphore {
  public static final int NO_LIMIT;
  private static final int THREAD_POOL_SIZE;
  private final java.util.concurrent.ScheduledExecutorService executorService;
  private final long period;
  private final java.util.concurrent.TimeUnit unit;
  private final boolean ownExecutor;
  private java.util.concurrent.ScheduledFuture<?> task;
  private long totalAcquireCount;
  private long periodCount;
  private int limit;
  private int acquireCount;
  private int lastCallsPerPeriod;
  private boolean shutdown;
  public org.apache.commons.lang3.concurrent.TimedSemaphore(long, java.util.concurrent.TimeUnit, int);
  public org.apache.commons.lang3.concurrent.TimedSemaphore(java.util.concurrent.ScheduledExecutorService, long, java.util.concurrent.TimeUnit, int);
  public synchronized void acquire() throws java.lang.InterruptedException;
  private boolean acquirePermit();
  synchronized void endOfPeriod();
  public synchronized int getAcquireCount();
  public synchronized int getAvailablePermits();
  public synchronized double getAverageCallsPerPeriod();
  protected java.util.concurrent.ScheduledExecutorService getExecutorService();
  public synchronized int getLastAcquiresPerPeriod();
  public final synchronized int getLimit();
  public long getPeriod();
  public java.util.concurrent.TimeUnit getUnit();
  public synchronized boolean isShutdown();
  private void prepareAcquire();
  public final synchronized void setLimit(int);
  public synchronized void shutdown();
  protected java.util.concurrent.ScheduledFuture<?> startTimer();
  public synchronized boolean tryAcquire();
}
