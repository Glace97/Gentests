Compiled from "AtomicSafeInitializer.java"
public class org.apache.commons.lang3.concurrent.AtomicSafeInitializer<T> extends org.apache.commons.lang3.concurrent.AbstractConcurrentInitializer<T, org.apache.commons.lang3.concurrent.ConcurrentException> {
  private static final java.lang.Object NO_INIT;
  private final java.util.concurrent.atomic.AtomicReference<org.apache.commons.lang3.concurrent.AtomicSafeInitializer<T>> factory;
  private final java.util.concurrent.atomic.AtomicReference<T> reference;
  public static <T> org.apache.commons.lang3.concurrent.AtomicSafeInitializer$Builder<org.apache.commons.lang3.concurrent.AtomicSafeInitializer<T>, T> builder();
  public org.apache.commons.lang3.concurrent.AtomicSafeInitializer();
  private org.apache.commons.lang3.concurrent.AtomicSafeInitializer(org.apache.commons.lang3.function.FailableSupplier<T, org.apache.commons.lang3.concurrent.ConcurrentException>, org.apache.commons.lang3.function.FailableConsumer<T, org.apache.commons.lang3.concurrent.ConcurrentException>);
  public final T get() throws org.apache.commons.lang3.concurrent.ConcurrentException;
  private T getNoInit();
  protected org.apache.commons.lang3.concurrent.ConcurrentException getTypedException(java.lang.Exception);
  public boolean isInitialized();
  protected java.lang.Exception getTypedException(java.lang.Exception);
  org.apache.commons.lang3.concurrent.AtomicSafeInitializer(org.apache.commons.lang3.function.FailableSupplier, org.apache.commons.lang3.function.FailableConsumer, org.apache.commons.lang3.concurrent.AtomicSafeInitializer$1);
  static {};
}
