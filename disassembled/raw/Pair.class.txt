Compiled from "Pair.java"
public abstract class org.apache.commons.lang3.tuple.Pair<L, R> implements java.util.Map$Entry<L, R>, java.lang.Comparable<org.apache.commons.lang3.tuple.Pair<L, R>>, java.io.Serializable {
  private static final long serialVersionUID;
  public static final org.apache.commons.lang3.tuple.Pair<?, ?>[] EMPTY_ARRAY;
  public org.apache.commons.lang3.tuple.Pair();
  public static <L, R> org.apache.commons.lang3.tuple.Pair<L, R>[] emptyArray();
  public static <L, R> org.apache.commons.lang3.tuple.Pair<L, R> of(L, R);
  public static <L, R> org.apache.commons.lang3.tuple.Pair<L, R> of(java.util.Map$Entry<L, R>);
  public static <L, R> org.apache.commons.lang3.tuple.Pair<L, R> ofNonNull(L, R);
  public <E extends java.lang.Throwable> void accept(org.apache.commons.lang3.function.FailableBiConsumer<L, R, E>) throws E;
  public <V, E extends java.lang.Throwable> V apply(org.apache.commons.lang3.function.FailableBiFunction<L, R, V, E>) throws E;
  public int compareTo(org.apache.commons.lang3.tuple.Pair<L, R>);
  public boolean equals(java.lang.Object);
  public final L getKey();
  public abstract L getLeft();
  public abstract R getRight();
  public R getValue();
  public int hashCode();
  public java.lang.String toString();
  public java.lang.String toString(java.lang.String);
  public int compareTo(java.lang.Object);
  static {};
}
