Compiled from "ComparableUtils.java"
public class org.apache.commons.lang3.compare.ComparableUtils {
  public static <A extends java.lang.Comparable<A>> java.util.function.Predicate<A> between(A, A);
  public static <A extends java.lang.Comparable<A>> java.util.function.Predicate<A> betweenExclusive(A, A);
  public static <A extends java.lang.Comparable<A>> java.util.function.Predicate<A> ge(A);
  public static <A extends java.lang.Comparable<A>> java.util.function.Predicate<A> gt(A);
  public static <A extends java.lang.Comparable<A>> org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder<A> is(A);
  public static <A extends java.lang.Comparable<A>> java.util.function.Predicate<A> le(A);
  public static <A extends java.lang.Comparable<A>> java.util.function.Predicate<A> lt(A);
  public static <A extends java.lang.Comparable<A>> A max(A, A);
  public static <A extends java.lang.Comparable<A>> A min(A, A);
  private org.apache.commons.lang3.compare.ComparableUtils();
  private static boolean lambda$lt$5(java.lang.Comparable, java.lang.Comparable);
  private static boolean lambda$le$4(java.lang.Comparable, java.lang.Comparable);
  private static boolean lambda$gt$3(java.lang.Comparable, java.lang.Comparable);
  private static boolean lambda$ge$2(java.lang.Comparable, java.lang.Comparable);
  private static boolean lambda$betweenExclusive$1(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable);
  private static boolean lambda$between$0(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable);
}
