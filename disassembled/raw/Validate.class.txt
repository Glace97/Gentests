Compiled from "Validate.java"
public class org.apache.commons.lang3.Validate {
  private static final java.lang.String DEFAULT_NOT_NAN_EX_MESSAGE;
  private static final java.lang.String DEFAULT_FINITE_EX_MESSAGE;
  private static final java.lang.String DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE;
  private static final java.lang.String DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE;
  private static final java.lang.String DEFAULT_MATCHES_PATTERN_EX;
  private static final java.lang.String DEFAULT_IS_NULL_EX_MESSAGE;
  private static final java.lang.String DEFAULT_IS_TRUE_EX_MESSAGE;
  private static final java.lang.String DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE;
  private static final java.lang.String DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE;
  private static final java.lang.String DEFAULT_NOT_BLANK_EX_MESSAGE;
  private static final java.lang.String DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE;
  private static final java.lang.String DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE;
  private static final java.lang.String DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE;
  private static final java.lang.String DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE;
  private static final java.lang.String DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE;
  private static final java.lang.String DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE;
  private static final java.lang.String DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE;
  private static final java.lang.String DEFAULT_VALID_STATE_EX_MESSAGE;
  private static final java.lang.String DEFAULT_IS_ASSIGNABLE_EX_MESSAGE;
  private static final java.lang.String DEFAULT_IS_INSTANCE_OF_EX_MESSAGE;
  public static void exclusiveBetween(double, double, double);
  public static void exclusiveBetween(double, double, double, java.lang.String);
  public static void exclusiveBetween(long, long, long);
  public static void exclusiveBetween(long, long, long, java.lang.String);
  public static <T> void exclusiveBetween(T, T, java.lang.Comparable<T>);
  public static <T> void exclusiveBetween(T, T, java.lang.Comparable<T>, java.lang.String, java.lang.Object...);
  public static void finite(double);
  public static void finite(double, java.lang.String, java.lang.Object...);
  private static java.lang.String getMessage(java.lang.String, java.lang.Object...);
  public static void inclusiveBetween(double, double, double);
  public static void inclusiveBetween(double, double, double, java.lang.String);
  public static void inclusiveBetween(long, long, long);
  public static void inclusiveBetween(long, long, long, java.lang.String);
  public static <T> void inclusiveBetween(T, T, java.lang.Comparable<T>);
  public static <T> void inclusiveBetween(T, T, java.lang.Comparable<T>, java.lang.String, java.lang.Object...);
  public static void isAssignableFrom(java.lang.Class<?>, java.lang.Class<?>);
  public static void isAssignableFrom(java.lang.Class<?>, java.lang.Class<?>, java.lang.String, java.lang.Object...);
  public static void isInstanceOf(java.lang.Class<?>, java.lang.Object);
  public static void isInstanceOf(java.lang.Class<?>, java.lang.Object, java.lang.String, java.lang.Object...);
  public static void isTrue(boolean);
  public static void isTrue(boolean, java.lang.String, double);
  public static void isTrue(boolean, java.lang.String, long);
  public static void isTrue(boolean, java.lang.String, java.lang.Object...);
  public static void matchesPattern(java.lang.CharSequence, java.lang.String);
  public static void matchesPattern(java.lang.CharSequence, java.lang.String, java.lang.String, java.lang.Object...);
  public static <T extends java.lang.Iterable<?>> T noNullElements(T);
  public static <T extends java.lang.Iterable<?>> T noNullElements(T, java.lang.String, java.lang.Object...);
  public static <T> T[] noNullElements(T[]);
  public static <T> T[] noNullElements(T[], java.lang.String, java.lang.Object...);
  public static <T extends java.lang.CharSequence> T notBlank(T);
  public static <T extends java.lang.CharSequence> T notBlank(T, java.lang.String, java.lang.Object...);
  public static <T extends java.util.Collection<?>> T notEmpty(T);
  public static <T extends java.util.Map<?, ?>> T notEmpty(T);
  public static <T extends java.lang.CharSequence> T notEmpty(T);
  public static <T extends java.util.Collection<?>> T notEmpty(T, java.lang.String, java.lang.Object...);
  public static <T extends java.util.Map<?, ?>> T notEmpty(T, java.lang.String, java.lang.Object...);
  public static <T extends java.lang.CharSequence> T notEmpty(T, java.lang.String, java.lang.Object...);
  public static <T> T[] notEmpty(T[]);
  public static <T> T[] notEmpty(T[], java.lang.String, java.lang.Object...);
  public static void notNaN(double);
  public static void notNaN(double, java.lang.String, java.lang.Object...);
  public static <T> T notNull(T);
  public static <T> T notNull(T, java.lang.String, java.lang.Object...);
  private static java.util.function.Supplier<java.lang.String> toSupplier(java.lang.String, java.lang.Object...);
  public static <T extends java.util.Collection<?>> T validIndex(T, int);
  public static <T extends java.lang.CharSequence> T validIndex(T, int);
  public static <T extends java.util.Collection<?>> T validIndex(T, int, java.lang.String, java.lang.Object...);
  public static <T extends java.lang.CharSequence> T validIndex(T, int, java.lang.String, java.lang.Object...);
  public static <T> T[] validIndex(T[], int);
  public static <T> T[] validIndex(T[], int, java.lang.String, java.lang.Object...);
  public static void validState(boolean);
  public static void validState(boolean, java.lang.String, java.lang.Object...);
  public org.apache.commons.lang3.Validate();
  private static java.lang.String lambda$toSupplier$0(java.lang.String, java.lang.Object[]);
}
