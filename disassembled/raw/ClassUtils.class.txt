Compiled from "ClassUtils.java"
public class org.apache.commons.lang3.ClassUtils {
  private static final java.util.Comparator<java.lang.Class<?>> COMPARATOR;
  public static final char PACKAGE_SEPARATOR_CHAR;
  public static final java.lang.String PACKAGE_SEPARATOR;
  public static final char INNER_CLASS_SEPARATOR_CHAR;
  public static final java.lang.String INNER_CLASS_SEPARATOR;
  private static final java.util.Map<java.lang.String, java.lang.Class<?>> namePrimitiveMap;
  private static final java.util.Map<java.lang.Class<?>, java.lang.Class<?>> primitiveWrapperMap;
  private static final java.util.Map<java.lang.Class<?>, java.lang.Class<?>> wrapperPrimitiveMap;
  private static final java.util.Map<java.lang.String, java.lang.String> abbreviationMap;
  private static final java.util.Map<java.lang.String, java.lang.String> reverseAbbreviationMap;
  public static java.util.Comparator<java.lang.Class<?>> comparator();
  public static java.util.List<java.lang.String> convertClassesToClassNames(java.util.List<java.lang.Class<?>>);
  public static java.util.List<java.lang.Class<?>> convertClassNamesToClasses(java.util.List<java.lang.String>);
  public static java.lang.String getAbbreviatedName(java.lang.Class<?>, int);
  public static java.lang.String getAbbreviatedName(java.lang.String, int);
  public static java.util.List<java.lang.Class<?>> getAllInterfaces(java.lang.Class<?>);
  private static void getAllInterfaces(java.lang.Class<?>, java.util.HashSet<java.lang.Class<?>>);
  public static java.util.List<java.lang.Class<?>> getAllSuperclasses(java.lang.Class<?>);
  public static java.lang.String getCanonicalName(java.lang.Class<?>);
  public static java.lang.String getCanonicalName(java.lang.Class<?>, java.lang.String);
  public static java.lang.String getCanonicalName(java.lang.Object);
  public static java.lang.String getCanonicalName(java.lang.Object, java.lang.String);
  private static java.lang.String getCanonicalName(java.lang.String);
  public static java.lang.Class<?> getClass(java.lang.ClassLoader, java.lang.String) throws java.lang.ClassNotFoundException;
  public static java.lang.Class<?> getClass(java.lang.ClassLoader, java.lang.String, boolean) throws java.lang.ClassNotFoundException;
  public static java.lang.Class<?> getClass(java.lang.String) throws java.lang.ClassNotFoundException;
  public static java.lang.Class<?> getClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException;
  public static <T> java.lang.Class<T> getComponentType(java.lang.Class<T[]>);
  public static java.lang.String getName(java.lang.Class<?>);
  public static java.lang.String getName(java.lang.Class<?>, java.lang.String);
  public static java.lang.String getName(java.lang.Object);
  public static java.lang.String getName(java.lang.Object, java.lang.String);
  public static java.lang.String getPackageCanonicalName(java.lang.Class<?>);
  public static java.lang.String getPackageCanonicalName(java.lang.Object, java.lang.String);
  public static java.lang.String getPackageCanonicalName(java.lang.String);
  public static java.lang.String getPackageName(java.lang.Class<?>);
  public static java.lang.String getPackageName(java.lang.Object, java.lang.String);
  public static java.lang.String getPackageName(java.lang.String);
  public static java.lang.reflect.Method getPublicMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...) throws java.lang.NoSuchMethodException;
  public static java.lang.String getShortCanonicalName(java.lang.Class<?>);
  public static java.lang.String getShortCanonicalName(java.lang.Object, java.lang.String);
  public static java.lang.String getShortCanonicalName(java.lang.String);
  public static java.lang.String getShortClassName(java.lang.Class<?>);
  public static java.lang.String getShortClassName(java.lang.Object, java.lang.String);
  public static java.lang.String getShortClassName(java.lang.String);
  public static java.lang.String getSimpleName(java.lang.Class<?>);
  public static java.lang.String getSimpleName(java.lang.Class<?>, java.lang.String);
  public static java.lang.String getSimpleName(java.lang.Object);
  public static java.lang.String getSimpleName(java.lang.Object, java.lang.String);
  public static java.lang.Iterable<java.lang.Class<?>> hierarchy(java.lang.Class<?>);
  public static java.lang.Iterable<java.lang.Class<?>> hierarchy(java.lang.Class<?>, org.apache.commons.lang3.ClassUtils$Interfaces);
  public static boolean isAssignable(java.lang.Class<?>, java.lang.Class<?>);
  public static boolean isAssignable(java.lang.Class<?>, java.lang.Class<?>, boolean);
  public static boolean isAssignable(java.lang.Class<?>[], java.lang.Class<?>...);
  public static boolean isAssignable(java.lang.Class<?>[], java.lang.Class<?>[], boolean);
  public static boolean isInnerClass(java.lang.Class<?>);
  public static boolean isPrimitiveOrWrapper(java.lang.Class<?>);
  public static boolean isPrimitiveWrapper(java.lang.Class<?>);
  public static boolean isPublic(java.lang.Class<?>);
  public static java.lang.Class<?>[] primitivesToWrappers(java.lang.Class<?>...);
  public static java.lang.Class<?> primitiveToWrapper(java.lang.Class<?>);
  private static java.lang.String toCanonicalName(java.lang.String);
  public static java.lang.Class<?>[] toClass(java.lang.Object...);
  private static boolean useFull(int, int, int, int);
  public static java.lang.Class<?>[] wrappersToPrimitives(java.lang.Class<?>...);
  public static java.lang.Class<?> wrapperToPrimitive(java.lang.Class<?>);
  public org.apache.commons.lang3.ClassUtils();
  private static java.lang.Class lambda$wrappersToPrimitives$8(java.lang.Class[], int);
  private static java.lang.Class lambda$toClass$7(java.lang.Object[], int);
  private static java.lang.Class lambda$primitivesToWrappers$6(java.lang.Class[], int);
  private static java.util.Iterator lambda$hierarchy$5(java.lang.Iterable);
  private static java.util.Iterator lambda$hierarchy$4(java.lang.Class);
  private static void lambda$convertClassNamesToClasses$3(java.util.List, java.lang.String);
  private static java.lang.String lambda$convertClassesToClassNames$2(java.lang.Class);
  private static void lambda$static$1(java.lang.Class, java.lang.Class);
  private static int lambda$static$0(java.lang.Class, java.lang.Class);
  static {};
}
