Compiled from "ArrayUtils.java"
public class org.apache.commons.lang3.ArrayUtils {
  public static final boolean[] EMPTY_BOOLEAN_ARRAY;
  public static final java.lang.Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY;
  public static final byte[] EMPTY_BYTE_ARRAY;
  public static final java.lang.Byte[] EMPTY_BYTE_OBJECT_ARRAY;
  public static final char[] EMPTY_CHAR_ARRAY;
  public static final java.lang.Character[] EMPTY_CHARACTER_OBJECT_ARRAY;
  public static final java.lang.Class<?>[] EMPTY_CLASS_ARRAY;
  public static final double[] EMPTY_DOUBLE_ARRAY;
  public static final java.lang.Double[] EMPTY_DOUBLE_OBJECT_ARRAY;
  public static final java.lang.reflect.Field[] EMPTY_FIELD_ARRAY;
  public static final float[] EMPTY_FLOAT_ARRAY;
  public static final java.lang.Float[] EMPTY_FLOAT_OBJECT_ARRAY;
  public static final int[] EMPTY_INT_ARRAY;
  public static final java.lang.Integer[] EMPTY_INTEGER_OBJECT_ARRAY;
  public static final long[] EMPTY_LONG_ARRAY;
  public static final java.lang.Long[] EMPTY_LONG_OBJECT_ARRAY;
  public static final java.lang.reflect.Method[] EMPTY_METHOD_ARRAY;
  public static final java.lang.Object[] EMPTY_OBJECT_ARRAY;
  public static final short[] EMPTY_SHORT_ARRAY;
  public static final java.lang.Short[] EMPTY_SHORT_OBJECT_ARRAY;
  public static final java.lang.String[] EMPTY_STRING_ARRAY;
  public static final java.lang.Throwable[] EMPTY_THROWABLE_ARRAY;
  public static final java.lang.reflect.Type[] EMPTY_TYPE_ARRAY;
  public static final int INDEX_NOT_FOUND;
  public static boolean[] add(boolean[], boolean);
  public static boolean[] add(boolean[], int, boolean);
  public static byte[] add(byte[], byte);
  public static byte[] add(byte[], int, byte);
  public static char[] add(char[], char);
  public static char[] add(char[], int, char);
  public static double[] add(double[], double);
  public static double[] add(double[], int, double);
  public static float[] add(float[], float);
  public static float[] add(float[], int, float);
  public static int[] add(int[], int);
  public static int[] add(int[], int, int);
  public static long[] add(long[], int, long);
  public static long[] add(long[], long);
  private static java.lang.Object add(java.lang.Object, int, java.lang.Object, java.lang.Class<?>);
  public static short[] add(short[], int, short);
  public static short[] add(short[], short);
  public static <T> T[] add(T[], int, T);
  public static <T> T[] add(T[], T);
  public static boolean[] addAll(boolean[], boolean...);
  public static byte[] addAll(byte[], byte...);
  public static char[] addAll(char[], char...);
  public static double[] addAll(double[], double...);
  public static float[] addAll(float[], float...);
  public static int[] addAll(int[], int...);
  public static long[] addAll(long[], long...);
  public static short[] addAll(short[], short...);
  public static <T> T[] addAll(T[], T...);
  public static boolean[] addFirst(boolean[], boolean);
  public static byte[] addFirst(byte[], byte);
  public static char[] addFirst(char[], char);
  public static double[] addFirst(double[], double);
  public static float[] addFirst(float[], float);
  public static int[] addFirst(int[], int);
  public static long[] addFirst(long[], long);
  public static short[] addFirst(short[], short);
  public static <T> T[] addFirst(T[], T);
  public static boolean[] clone(boolean[]);
  public static byte[] clone(byte[]);
  public static char[] clone(char[]);
  public static double[] clone(double[]);
  public static float[] clone(float[]);
  public static int[] clone(int[]);
  public static long[] clone(long[]);
  public static short[] clone(short[]);
  public static <T> T[] clone(T[]);
  public static boolean contains(boolean[], boolean);
  public static boolean contains(byte[], byte);
  public static boolean contains(char[], char);
  public static boolean contains(double[], double);
  public static boolean contains(double[], double, double);
  public static boolean contains(float[], float);
  public static boolean contains(int[], int);
  public static boolean contains(long[], long);
  public static boolean contains(java.lang.Object[], java.lang.Object);
  public static boolean contains(short[], short);
  public static boolean containsAny(java.lang.Object[], java.lang.Object...);
  private static java.lang.Object copyArrayGrow1(java.lang.Object, java.lang.Class<?>);
  public static <T> T get(T[], int);
  public static <T> T get(T[], int, T);
  public static <T> java.lang.Class<T> getComponentType(T[]);
  public static int getLength(java.lang.Object);
  public static int hashCode(java.lang.Object);
  public static java.util.BitSet indexesOf(boolean[], boolean);
  public static java.util.BitSet indexesOf(boolean[], boolean, int);
  public static java.util.BitSet indexesOf(byte[], byte);
  public static java.util.BitSet indexesOf(byte[], byte, int);
  public static java.util.BitSet indexesOf(char[], char);
  public static java.util.BitSet indexesOf(char[], char, int);
  public static java.util.BitSet indexesOf(double[], double);
  public static java.util.BitSet indexesOf(double[], double, double);
  public static java.util.BitSet indexesOf(double[], double, int);
  public static java.util.BitSet indexesOf(double[], double, int, double);
  public static java.util.BitSet indexesOf(float[], float);
  public static java.util.BitSet indexesOf(float[], float, int);
  public static java.util.BitSet indexesOf(int[], int);
  public static java.util.BitSet indexesOf(int[], int, int);
  public static java.util.BitSet indexesOf(long[], long);
  public static java.util.BitSet indexesOf(long[], long, int);
  public static java.util.BitSet indexesOf(java.lang.Object[], java.lang.Object);
  public static java.util.BitSet indexesOf(java.lang.Object[], java.lang.Object, int);
  public static java.util.BitSet indexesOf(short[], short);
  public static java.util.BitSet indexesOf(short[], short, int);
  public static int indexOf(boolean[], boolean);
  public static int indexOf(boolean[], boolean, int);
  public static int indexOf(byte[], byte);
  public static int indexOf(byte[], byte, int);
  public static int indexOf(char[], char);
  public static int indexOf(char[], char, int);
  public static int indexOf(double[], double);
  public static int indexOf(double[], double, double);
  public static int indexOf(double[], double, int);
  public static int indexOf(double[], double, int, double);
  public static int indexOf(float[], float);
  public static int indexOf(float[], float, int);
  public static int indexOf(int[], int);
  public static int indexOf(int[], int, int);
  public static int indexOf(long[], long);
  public static int indexOf(long[], long, int);
  public static int indexOf(java.lang.Object[], java.lang.Object);
  public static int indexOf(java.lang.Object[], java.lang.Object, int);
  public static int indexOf(short[], short);
  public static int indexOf(short[], short, int);
  public static boolean[] insert(int, boolean[], boolean...);
  public static byte[] insert(int, byte[], byte...);
  public static char[] insert(int, char[], char...);
  public static double[] insert(int, double[], double...);
  public static float[] insert(int, float[], float...);
  public static int[] insert(int, int[], int...);
  public static long[] insert(int, long[], long...);
  public static short[] insert(int, short[], short...);
  public static <T> T[] insert(int, T[], T...);
  private static boolean isArrayEmpty(java.lang.Object);
  public static <T> boolean isArrayIndexValid(T[], int);
  public static boolean isEmpty(boolean[]);
  public static boolean isEmpty(byte[]);
  public static boolean isEmpty(char[]);
  public static boolean isEmpty(double[]);
  public static boolean isEmpty(float[]);
  public static boolean isEmpty(int[]);
  public static boolean isEmpty(long[]);
  public static boolean isEmpty(java.lang.Object[]);
  public static boolean isEmpty(short[]);
  public static boolean isEquals(java.lang.Object, java.lang.Object);
  public static boolean isNotEmpty(boolean[]);
  public static boolean isNotEmpty(byte[]);
  public static boolean isNotEmpty(char[]);
  public static boolean isNotEmpty(double[]);
  public static boolean isNotEmpty(float[]);
  public static boolean isNotEmpty(int[]);
  public static boolean isNotEmpty(long[]);
  public static boolean isNotEmpty(short[]);
  public static <T> boolean isNotEmpty(T[]);
  public static boolean isSameLength(boolean[], boolean[]);
  public static boolean isSameLength(byte[], byte[]);
  public static boolean isSameLength(char[], char[]);
  public static boolean isSameLength(double[], double[]);
  public static boolean isSameLength(float[], float[]);
  public static boolean isSameLength(int[], int[]);
  public static boolean isSameLength(long[], long[]);
  public static boolean isSameLength(java.lang.Object, java.lang.Object);
  public static boolean isSameLength(java.lang.Object[], java.lang.Object[]);
  public static boolean isSameLength(short[], short[]);
  public static boolean isSameType(java.lang.Object, java.lang.Object);
  public static boolean isSorted(boolean[]);
  public static boolean isSorted(byte[]);
  public static boolean isSorted(char[]);
  public static boolean isSorted(double[]);
  public static boolean isSorted(float[]);
  public static boolean isSorted(int[]);
  public static boolean isSorted(long[]);
  public static boolean isSorted(short[]);
  public static <T extends java.lang.Comparable<? super T>> boolean isSorted(T[]);
  public static <T> boolean isSorted(T[], java.util.Comparator<T>);
  public static int lastIndexOf(boolean[], boolean);
  public static int lastIndexOf(boolean[], boolean, int);
  public static int lastIndexOf(byte[], byte);
  public static int lastIndexOf(byte[], byte, int);
  public static int lastIndexOf(char[], char);
  public static int lastIndexOf(char[], char, int);
  public static int lastIndexOf(double[], double);
  public static int lastIndexOf(double[], double, double);
  public static int lastIndexOf(double[], double, int);
  public static int lastIndexOf(double[], double, int, double);
  public static int lastIndexOf(float[], float);
  public static int lastIndexOf(float[], float, int);
  public static int lastIndexOf(int[], int);
  public static int lastIndexOf(int[], int, int);
  public static int lastIndexOf(long[], long);
  public static int lastIndexOf(long[], long, int);
  public static int lastIndexOf(java.lang.Object[], java.lang.Object);
  public static int lastIndexOf(java.lang.Object[], java.lang.Object, int);
  public static int lastIndexOf(short[], short);
  public static int lastIndexOf(short[], short, int);
  public static <T> T[] newInstance(java.lang.Class<T>, int);
  public static boolean[] nullToEmpty(boolean[]);
  public static java.lang.Boolean[] nullToEmpty(java.lang.Boolean[]);
  public static byte[] nullToEmpty(byte[]);
  public static java.lang.Byte[] nullToEmpty(java.lang.Byte[]);
  public static char[] nullToEmpty(char[]);
  public static java.lang.Character[] nullToEmpty(java.lang.Character[]);
  public static java.lang.Class<?>[] nullToEmpty(java.lang.Class<?>[]);
  public static double[] nullToEmpty(double[]);
  public static java.lang.Double[] nullToEmpty(java.lang.Double[]);
  public static float[] nullToEmpty(float[]);
  public static java.lang.Float[] nullToEmpty(java.lang.Float[]);
  public static int[] nullToEmpty(int[]);
  public static java.lang.Integer[] nullToEmpty(java.lang.Integer[]);
  public static long[] nullToEmpty(long[]);
  public static java.lang.Long[] nullToEmpty(java.lang.Long[]);
  public static java.lang.Object[] nullToEmpty(java.lang.Object[]);
  public static short[] nullToEmpty(short[]);
  public static java.lang.Short[] nullToEmpty(java.lang.Short[]);
  public static java.lang.String[] nullToEmpty(java.lang.String[]);
  public static <T> T[] nullToEmpty(T[], java.lang.Class<T[]>);
  private static java.util.concurrent.ThreadLocalRandom random();
  public static boolean[] remove(boolean[], int);
  public static byte[] remove(byte[], int);
  public static char[] remove(char[], int);
  public static double[] remove(double[], int);
  public static float[] remove(float[], int);
  public static int[] remove(int[], int);
  public static long[] remove(long[], int);
  private static java.lang.Object remove(java.lang.Object, int);
  public static short[] remove(short[], int);
  public static <T> T[] remove(T[], int);
  public static boolean[] removeAll(boolean[], int...);
  public static byte[] removeAll(byte[], int...);
  public static char[] removeAll(char[], int...);
  public static double[] removeAll(double[], int...);
  public static float[] removeAll(float[], int...);
  public static int[] removeAll(int[], int...);
  public static long[] removeAll(long[], int...);
  static java.lang.Object removeAll(java.lang.Object, java.util.BitSet);
  static java.lang.Object removeAll(java.lang.Object, int...);
  public static short[] removeAll(short[], int...);
  public static <T> T[] removeAll(T[], int...);
  public static boolean[] removeAllOccurences(boolean[], boolean);
  public static byte[] removeAllOccurences(byte[], byte);
  public static char[] removeAllOccurences(char[], char);
  public static double[] removeAllOccurences(double[], double);
  public static float[] removeAllOccurences(float[], float);
  public static int[] removeAllOccurences(int[], int);
  public static long[] removeAllOccurences(long[], long);
  public static short[] removeAllOccurences(short[], short);
  public static <T> T[] removeAllOccurences(T[], T);
  public static boolean[] removeAllOccurrences(boolean[], boolean);
  public static byte[] removeAllOccurrences(byte[], byte);
  public static char[] removeAllOccurrences(char[], char);
  public static double[] removeAllOccurrences(double[], double);
  public static float[] removeAllOccurrences(float[], float);
  public static int[] removeAllOccurrences(int[], int);
  public static long[] removeAllOccurrences(long[], long);
  public static short[] removeAllOccurrences(short[], short);
  public static <T> T[] removeAllOccurrences(T[], T);
  public static boolean[] removeElement(boolean[], boolean);
  public static byte[] removeElement(byte[], byte);
  public static char[] removeElement(char[], char);
  public static double[] removeElement(double[], double);
  public static float[] removeElement(float[], float);
  public static int[] removeElement(int[], int);
  public static long[] removeElement(long[], long);
  public static short[] removeElement(short[], short);
  public static <T> T[] removeElement(T[], java.lang.Object);
  public static boolean[] removeElements(boolean[], boolean...);
  public static byte[] removeElements(byte[], byte...);
  public static char[] removeElements(char[], char...);
  public static double[] removeElements(double[], double...);
  public static float[] removeElements(float[], float...);
  public static int[] removeElements(int[], int...);
  public static long[] removeElements(long[], long...);
  public static short[] removeElements(short[], short...);
  public static <T> T[] removeElements(T[], T...);
  public static void reverse(boolean[]);
  public static void reverse(boolean[], int, int);
  public static void reverse(byte[]);
  public static void reverse(byte[], int, int);
  public static void reverse(char[]);
  public static void reverse(char[], int, int);
  public static void reverse(double[]);
  public static void reverse(double[], int, int);
  public static void reverse(float[]);
  public static void reverse(float[], int, int);
  public static void reverse(int[]);
  public static void reverse(int[], int, int);
  public static void reverse(long[]);
  public static void reverse(long[], int, int);
  public static void reverse(java.lang.Object[]);
  public static void reverse(java.lang.Object[], int, int);
  public static void reverse(short[]);
  public static void reverse(short[], int, int);
  public static <T> T[] setAll(T[], java.util.function.IntFunction<? extends T>);
  public static <T> T[] setAll(T[], java.util.function.Supplier<? extends T>);
  public static void shift(boolean[], int);
  public static void shift(boolean[], int, int, int);
  public static void shift(byte[], int);
  public static void shift(byte[], int, int, int);
  public static void shift(char[], int);
  public static void shift(char[], int, int, int);
  public static void shift(double[], int);
  public static void shift(double[], int, int, int);
  public static void shift(float[], int);
  public static void shift(float[], int, int, int);
  public static void shift(int[], int);
  public static void shift(int[], int, int, int);
  public static void shift(long[], int);
  public static void shift(long[], int, int, int);
  public static void shift(java.lang.Object[], int);
  public static void shift(java.lang.Object[], int, int, int);
  public static void shift(short[], int);
  public static void shift(short[], int, int, int);
  public static void shuffle(boolean[]);
  public static void shuffle(boolean[], java.util.Random);
  public static void shuffle(byte[]);
  public static void shuffle(byte[], java.util.Random);
  public static void shuffle(char[]);
  public static void shuffle(char[], java.util.Random);
  public static void shuffle(double[]);
  public static void shuffle(double[], java.util.Random);
  public static void shuffle(float[]);
  public static void shuffle(float[], java.util.Random);
  public static void shuffle(int[]);
  public static void shuffle(int[], java.util.Random);
  public static void shuffle(long[]);
  public static void shuffle(long[], java.util.Random);
  public static void shuffle(java.lang.Object[]);
  public static void shuffle(java.lang.Object[], java.util.Random);
  public static void shuffle(short[]);
  public static void shuffle(short[], java.util.Random);
  public static boolean[] subarray(boolean[], int, int);
  public static byte[] subarray(byte[], int, int);
  public static char[] subarray(char[], int, int);
  public static double[] subarray(double[], int, int);
  public static float[] subarray(float[], int, int);
  public static int[] subarray(int[], int, int);
  public static long[] subarray(long[], int, int);
  public static short[] subarray(short[], int, int);
  public static <T> T[] subarray(T[], int, int);
  public static void swap(boolean[], int, int);
  public static void swap(boolean[], int, int, int);
  public static void swap(byte[], int, int);
  public static void swap(byte[], int, int, int);
  public static void swap(char[], int, int);
  public static void swap(char[], int, int, int);
  public static void swap(double[], int, int);
  public static void swap(double[], int, int, int);
  public static void swap(float[], int, int);
  public static void swap(float[], int, int, int);
  public static void swap(int[], int, int);
  public static void swap(int[], int, int, int);
  public static void swap(long[], int, int);
  public static void swap(long[], int, int, int);
  public static void swap(java.lang.Object[], int, int);
  public static void swap(java.lang.Object[], int, int, int);
  public static void swap(short[], int, int);
  public static void swap(short[], int, int, int);
  public static <T> T[] toArray(T...);
  public static java.util.Map<java.lang.Object, java.lang.Object> toMap(java.lang.Object[]);
  public static java.lang.Boolean[] toObject(boolean[]);
  public static java.lang.Byte[] toObject(byte[]);
  public static java.lang.Character[] toObject(char[]);
  public static java.lang.Double[] toObject(double[]);
  public static java.lang.Float[] toObject(float[]);
  public static java.lang.Integer[] toObject(int[]);
  public static java.lang.Long[] toObject(long[]);
  public static java.lang.Short[] toObject(short[]);
  public static boolean[] toPrimitive(java.lang.Boolean[]);
  public static boolean[] toPrimitive(java.lang.Boolean[], boolean);
  public static byte[] toPrimitive(java.lang.Byte[]);
  public static byte[] toPrimitive(java.lang.Byte[], byte);
  public static char[] toPrimitive(java.lang.Character[]);
  public static char[] toPrimitive(java.lang.Character[], char);
  public static double[] toPrimitive(java.lang.Double[]);
  public static double[] toPrimitive(java.lang.Double[], double);
  public static float[] toPrimitive(java.lang.Float[]);
  public static float[] toPrimitive(java.lang.Float[], float);
  public static int[] toPrimitive(java.lang.Integer[]);
  public static int[] toPrimitive(java.lang.Integer[], int);
  public static long[] toPrimitive(java.lang.Long[]);
  public static long[] toPrimitive(java.lang.Long[], long);
  public static java.lang.Object toPrimitive(java.lang.Object);
  public static short[] toPrimitive(java.lang.Short[]);
  public static short[] toPrimitive(java.lang.Short[], short);
  public static java.lang.String toString(java.lang.Object);
  public static java.lang.String toString(java.lang.Object, java.lang.String);
  public static java.lang.String[] toStringArray(java.lang.Object[]);
  public static java.lang.String[] toStringArray(java.lang.Object[], java.lang.String);
  public org.apache.commons.lang3.ArrayUtils();
  private static java.lang.Short lambda$toObject$8(short[], int);
  private static java.lang.Long lambda$toObject$7(long[], int);
  private static java.lang.Integer lambda$toObject$6(int[], int);
  private static java.lang.Float lambda$toObject$5(float[], int);
  private static java.lang.Double lambda$toObject$4(double[], int);
  private static java.lang.Character lambda$toObject$3(char[], int);
  private static java.lang.Byte lambda$toObject$2(byte[], int);
  private static java.lang.Boolean lambda$toObject$1(boolean[], int);
  private static boolean lambda$containsAny$0(java.lang.Object[], java.lang.Object);
  static {};
}
