Compiled from "FastDatePrinter.java"
public class org.apache.commons.lang3.time.FastDatePrinter implements org.apache.commons.lang3.time.DatePrinter,java.io.Serializable {
  private static final org.apache.commons.lang3.time.FastDatePrinter$Rule[] EMPTY_RULE_ARRAY;
  private static final long serialVersionUID;
  public static final int FULL;
  public static final int LONG;
  public static final int MEDIUM;
  public static final int SHORT;
  private static final int MAX_DIGITS;
  private static final java.util.concurrent.ConcurrentMap<org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey, java.lang.String> cTimeZoneDisplayCache;
  private final java.lang.String pattern;
  private final java.util.TimeZone timeZone;
  private final java.util.Locale locale;
  private transient org.apache.commons.lang3.time.FastDatePrinter$Rule[] rules;
  private transient int maxLengthEstimate;
  private static void appendDigits(java.lang.Appendable, int) throws java.io.IOException;
  private static void appendFullDigits(java.lang.Appendable, int, int) throws java.io.IOException;
  static java.lang.String getTimeZoneDisplay(java.util.TimeZone, boolean, int, java.util.Locale);
  protected org.apache.commons.lang3.time.FastDatePrinter(java.lang.String, java.util.TimeZone, java.util.Locale);
  private <B extends java.lang.Appendable> B applyRules(java.util.Calendar, B);
  protected java.lang.StringBuffer applyRules(java.util.Calendar, java.lang.StringBuffer);
  private java.lang.String applyRulesToString(java.util.Calendar);
  public boolean equals(java.lang.Object);
  public java.lang.String format(java.util.Calendar);
  public <B extends java.lang.Appendable> B format(java.util.Calendar, B);
  public java.lang.StringBuffer format(java.util.Calendar, java.lang.StringBuffer);
  public java.lang.String format(java.util.Date);
  public <B extends java.lang.Appendable> B format(java.util.Date, B);
  public java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer);
  public java.lang.String format(long);
  public <B extends java.lang.Appendable> B format(long, B);
  public java.lang.StringBuffer format(long, java.lang.StringBuffer);
  java.lang.String format(java.lang.Object);
  public java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public java.util.Locale getLocale();
  public int getMaxLengthEstimate();
  public java.lang.String getPattern();
  public java.util.TimeZone getTimeZone();
  public int hashCode();
  private void init();
  private java.util.Calendar newCalendar();
  protected java.util.List<org.apache.commons.lang3.time.FastDatePrinter$Rule> parsePattern();
  protected java.lang.String parseToken(java.lang.String, int[]);
  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
  protected org.apache.commons.lang3.time.FastDatePrinter$NumberRule selectNumberRule(int, int);
  public java.lang.String toString();
  private static java.lang.String lambda$getTimeZoneDisplay$0(java.util.TimeZone, boolean, int, java.util.Locale, org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey);
  static void access$000(java.lang.Appendable, int) throws java.io.IOException;
  static void access$100(java.lang.Appendable, int, int) throws java.io.IOException;
  static {};
}
