Compiled from "MethodUtils.java"
public class org.apache.commons.lang3.reflect.MethodUtils {
  private static final java.util.Comparator<java.lang.reflect.Method> METHOD_BY_SIGNATURE;
  private static int distance(java.lang.Class<?>[], java.lang.Class<?>[]);
  public static java.lang.reflect.Method getAccessibleMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...);
  public static java.lang.reflect.Method getAccessibleMethod(java.lang.reflect.Method);
  private static java.lang.reflect.Method getAccessibleMethodFromInterfaceNest(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...);
  private static java.lang.reflect.Method getAccessibleMethodFromSuperclass(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...);
  private static java.util.List<java.lang.Class<?>> getAllSuperclassesAndInterfaces(java.lang.Class<?>);
  public static <A extends java.lang.annotation.Annotation> A getAnnotation(java.lang.reflect.Method, java.lang.Class<A>, boolean, boolean);
  public static java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...);
  public static java.lang.reflect.Method getMatchingMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...);
  public static java.util.List<java.lang.reflect.Method> getMethodsListWithAnnotation(java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>);
  public static java.util.List<java.lang.reflect.Method> getMethodsListWithAnnotation(java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>, boolean, boolean);
  public static java.lang.reflect.Method[] getMethodsWithAnnotation(java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>);
  public static java.lang.reflect.Method[] getMethodsWithAnnotation(java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>, boolean, boolean);
  public static java.util.Set<java.lang.reflect.Method> getOverrideHierarchy(java.lang.reflect.Method, org.apache.commons.lang3.ClassUtils$Interfaces);
  static java.lang.Object[] getVarArgs(java.lang.Object[], java.lang.Class<?>[]);
  public static java.lang.Object invokeExactMethod(java.lang.Object, java.lang.String) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
  public static java.lang.Object invokeExactMethod(java.lang.Object, java.lang.String, java.lang.Object...) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
  public static java.lang.Object invokeExactMethod(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class<?>[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
  public static java.lang.Object invokeExactStaticMethod(java.lang.Class<?>, java.lang.String, java.lang.Object...) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
  public static java.lang.Object invokeExactStaticMethod(java.lang.Class<?>, java.lang.String, java.lang.Object[], java.lang.Class<?>[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
  public static java.lang.Object invokeMethod(java.lang.Object, boolean, java.lang.String) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
  public static java.lang.Object invokeMethod(java.lang.Object, boolean, java.lang.String, java.lang.Object...) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
  public static java.lang.Object invokeMethod(java.lang.Object, boolean, java.lang.String, java.lang.Object[], java.lang.Class<?>[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
  public static java.lang.Object invokeMethod(java.lang.Object, java.lang.String) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
  public static java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Object...) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
  public static java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class<?>[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
  public static java.lang.Object invokeStaticMethod(java.lang.Class<?>, java.lang.String, java.lang.Object...) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
  public static java.lang.Object invokeStaticMethod(java.lang.Class<?>, java.lang.String, java.lang.Object[], java.lang.Class<?>[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;
  private static java.lang.Object[] toVarArgs(java.lang.reflect.Method, java.lang.Object[]);
  public org.apache.commons.lang3.reflect.MethodUtils();
  private static void lambda$getMethodsListWithAnnotation$7(boolean, java.lang.Class, java.util.List, java.lang.Class);
  private static boolean lambda$getMethodsListWithAnnotation$6(java.lang.Class, java.lang.reflect.Method);
  private static void lambda$getMatchingMethod$5(java.lang.Class[], java.util.TreeMap, java.lang.reflect.Method);
  private static java.util.List lambda$getMatchingMethod$4(java.lang.Integer);
  private static boolean lambda$getMatchingMethod$3(java.lang.Class[], java.lang.reflect.Method);
  private static boolean lambda$getMatchingMethod$2(java.lang.String, java.lang.reflect.Method);
  private static boolean lambda$getMatchingMethod$1(java.lang.String, java.lang.reflect.Method);
  private static boolean lambda$getMatchingAccessibleMethod$0(java.lang.String, java.lang.Class[], java.lang.reflect.Method);
  static {};
}
