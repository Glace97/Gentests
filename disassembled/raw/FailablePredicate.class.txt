Compiled from "FailablePredicate.java"
public interface org.apache.commons.lang3.function.FailablePredicate<T, E extends java.lang.Throwable> {
  public static final org.apache.commons.lang3.function.FailablePredicate FALSE;
  public static final org.apache.commons.lang3.function.FailablePredicate TRUE;
  public static <T, E extends java.lang.Throwable> org.apache.commons.lang3.function.FailablePredicate<T, E> falsePredicate();
  public static <T, E extends java.lang.Throwable> org.apache.commons.lang3.function.FailablePredicate<T, E> truePredicate();
  public default org.apache.commons.lang3.function.FailablePredicate<T, E> and(org.apache.commons.lang3.function.FailablePredicate<? super T, E>);
  public default org.apache.commons.lang3.function.FailablePredicate<T, E> negate();
  public default org.apache.commons.lang3.function.FailablePredicate<T, E> or(org.apache.commons.lang3.function.FailablePredicate<? super T, E>);
  public abstract boolean test(T) throws E;
  private boolean lambda$or$4(org.apache.commons.lang3.function.FailablePredicate, java.lang.Object) throws java.lang.Throwable;
  private boolean lambda$negate$3(java.lang.Object) throws java.lang.Throwable;
  private boolean lambda$and$2(org.apache.commons.lang3.function.FailablePredicate, java.lang.Object) throws java.lang.Throwable;
  private static boolean lambda$static$1(java.lang.Object) throws java.lang.Throwable;
  private static boolean lambda$static$0(java.lang.Object) throws java.lang.Throwable;
  static {};
}
